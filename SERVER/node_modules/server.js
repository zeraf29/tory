var express = require('express')
 , http = require('http')
 , fs = require('fs')
 , net = require('net')
 ,socketio = require('socket.io');

var app = express();
app.set('port', 8887); // 포트수정

var server = net.createServer();
server.listen(8888);
var sockets = [];
console.log('Operating socket server');

var webServer = http.createServer(app).listen(app.get('port'), function () {
        console.log("web server starting.\n waiting order");
});

app.get('/', function (req, res) {
        fs.readFile('index.html', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});

app.get('/css', function (req, res) {
        fs.readFile('homepage.css', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});

app.get('/start', function (req, res) {
        fs.readFile('greenstart.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});

app.get('/stop', function (req, res) {
        fs.readFile('redstop.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/front', function (req, res) {
        fs.readFile('greenup.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/back', function (req, res) {
        fs.readFile('greendown.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/left', function (req, res) {
        fs.readFile('greenleft.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/right', function (req, res) {
        fs.readFile('greenright.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/disc', function (req, res) {
        fs.readFile('disconnect.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/redup', function (req, res) {
        fs.readFile('redup.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/redleft', function (req, res) {
        fs.readFile('redleft.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/redstop', function (req, res) {
        fs.readFile('redstop.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/redright', function (req, res) {
        fs.readFile('redright.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});
app.get('/reddown', function (req, res) {
        fs.readFile('reddown.png', function (error, data) {
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.end(data);
        });
});





var io = socketio.listen(webServer);
io.sockets.on('connection', function (iosocket) {
    if( switchip == 1 ) {
	io.sockets.emit('ipadrs', ipadrs);
    console.log(ipadrs);
	switchip = 0;
	}
    iosocket.on('message', function (message) {
        console.log("iosocket data received :",message);
        cSocket.write(message);
    });
    
});

var cSocket = -1;
var ipadrs, switchip;

server.on('connection', function(socket) {
    console.log('Client Connected');
    socket.setEncoding('utf8');
    sockets.push(socket);
    console.log('Client Count:', sockets.length);
    if(sockets.length>1){
        console.log('Already connected 1. Too many now');
        return socket.end();
    }
    cSocket = socket;
    socket.on('error', function(err) {
        console.log('socket err:', err.message);
    });

    socket.on('data', function(data) {
	if( data.length > 10 ) {
		console.log('IP Address is transfered. :', data);
		ipadrs = data;
		switchip = 1;
	}
    });

    socket.on('close', function() {
        console.log('Socket Close');
        var index = sockets.indexOf(socket);
        sockets.splice(index, 1);
        console.log('Now connecting clients : ', sockets.length);
    });
});

server.on('error', function(err) {
    console.log('servererr:', err.message);
});

server.on('close', function(err) {
    console.log('Server Close');
});
